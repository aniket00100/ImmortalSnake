{"version":3,"sources":["Game.js","App.js","index.js"],"names":["Snake","props","afterKeyPress","event","code","clearInterval","intervalId","currentKey","setInterval","snakeMovement","timeIntervalMS","console","log","snake","push","y","length","x","box","context","fillRect","clearRect","food","newFood","shift","gameOver","drawSnake","Math","round","random","max","fillStyle","i","setState","score","state","head","over","noX","noY","document","removeEventListener","this","addEventListener","style","textAlign","React","Component","App","canvasRef","createRef","current","getContext","strokeStyle","snakeComponent","Game","className","width","height","ref","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.357f7bb9.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Snake extends React.Component {\n  constructor(props) {\n    super(props);\n    this.snake = [{ x: 0, y: 0 }];\n    this.currentKey = null;\n    this.intervalId = null;\n    this.box = 20;\n    this.food = [{ x: 0, y: 0 }];\n    this.max = 29;\n    this.timeIntervalMS = 50;\n    this.state = { score: -1 };\n  }\n\n  componentDidMount() {\n    this.drawSnake();\n    this.newFood();\n    document.addEventListener(\"keydown\", this.afterKeyPress);\n  }\n\n  afterKeyPress = (event) => {\n    switch (event.code) {\n      case \"Space\":\n        clearInterval(this.intervalId);\n        return;\n\n      case \"ArrowUp\":\n        if (this.currentKey === \"ArrowDown\") break;\n        this.currentKey = \"ArrowUp\";\n        clearInterval(this.intervalId);\n        this.intervalId = setInterval(this.snakeMovement, this.timeIntervalMS);\n\n        break;\n\n      case \"ArrowDown\":\n        if (this.currentKey === \"ArrowUp\") break;\n        this.currentKey = \"ArrowDown\";\n        clearInterval(this.intervalId);\n        this.intervalId = setInterval(this.snakeMovement, this.timeIntervalMS);\n\n        break;\n\n      case \"ArrowLeft\":\n        if (this.currentKey === \"ArrowRight\") break;\n        this.currentKey = \"ArrowLeft\";\n        clearInterval(this.intervalId);\n        this.intervalId = setInterval(this.snakeMovement, this.timeIntervalMS);\n\n        break;\n\n      case \"ArrowRight\":\n        if (this.currentKey === \"ArrowLeft\") break;\n        this.currentKey = \"ArrowRight\";\n        clearInterval(this.intervalId);\n        this.intervalId = setInterval(this.snakeMovement, this.timeIntervalMS);\n\n        break;\n\n      default:\n        console.log(this.snake);\n        break;\n    }\n    return;\n  };\n\n  snakeMovement = () => {\n    // changing the co-ordinates of the snake\n    // according to the key pressed\n\n    // updating the last element of the snake array\n    // console.log(this.snake);\n\n    if (this.currentKey === \"ArrowRight\") {\n      this.snake.push({\n        y: this.snake[this.snake.length - 1].y,\n        x: this.snake[this.snake.length - 1].x + this.box,\n      });\n      this.props.context.fillRect(\n        this.snake[this.snake.length - 1].x,\n        this.snake[this.snake.length - 1].y,\n        this.box,\n        this.box\n      );\n      this.props.context.clearRect(\n        this.snake[0].x,\n        this.snake[0].y,\n        this.box,\n        this.box\n      );\n    } else if (this.currentKey === \"ArrowLeft\") {\n      this.snake.push({\n        y: this.snake[this.snake.length - 1].y,\n        x: this.snake[this.snake.length - 1].x - this.box,\n      });\n      this.props.context.fillRect(\n        this.snake[this.snake.length - 1].x,\n        this.snake[this.snake.length - 1].y,\n        this.box,\n        this.box\n      );\n      this.props.context.clearRect(\n        this.snake[0].x,\n        this.snake[0].y,\n        this.box,\n        this.box\n      );\n    } else if (this.currentKey === \"ArrowUp\") {\n      this.snake.push({\n        y: this.snake[this.snake.length - 1].y - this.box,\n        x: this.snake[this.snake.length - 1].x,\n      });\n      this.props.context.fillRect(\n        this.snake[this.snake.length - 1].x,\n        this.snake[this.snake.length - 1].y,\n        this.box,\n        this.box\n      );\n      this.props.context.clearRect(\n        this.snake[0].x,\n        this.snake[0].y,\n        this.box,\n        this.box\n      );\n    } else if (this.currentKey === \"ArrowDown\") {\n      this.snake.push({\n        y: this.snake[this.snake.length - 1].y + this.box,\n        x: this.snake[this.snake.length - 1].x,\n      });\n      this.props.context.fillRect(\n        this.snake[this.snake.length - 1].x,\n        this.snake[this.snake.length - 1].y,\n        this.box,\n        this.box\n      );\n      this.props.context.clearRect(\n        this.snake[0].x,\n        this.snake[0].y,\n        this.box,\n        this.box\n      );\n    }\n\n    if (\n      this.snake[this.snake.length - 1].x === this.food[0].x &&\n      this.snake[this.snake.length - 1].y === this.food[0].y\n    ) {\n      this.newFood();\n    } else this.snake.shift();\n\n    this.gameOver();\n  };\n\n  drawSnake = () => {\n    let x = Math.round(Math.random() * (this.max - 5)) + 1;\n    let y = Math.round(Math.random() * (this.max - 5)) + 1;\n\n    this.snake[0] = { x: x * this.box, y: y * this.box };\n    this.snake[1] = { x: (x + 1) * this.box, y: y * this.box };\n\n    this.props.context.fillStyle = \"black\";\n\n    for (let i = 0; i <= this.snake.length - 1; i++) {\n      this.props.context.fillRect(\n        this.snake[i].x,\n        this.snake[i].y,\n        this.box,\n        this.box\n      );\n    }\n    console.log(this.snake[0], this.snake[1]);\n  };\n\n  newFood = () => {\n    let x = Math.round(Math.random() * this.max);\n    let y = Math.round(Math.random() * this.max);\n\n    for (let i = 0; i <= this.snake.length - 1; i++) {\n      if (\n        this.snake[i].x === x * this.box &&\n        this.snake[i].y === y * this.box\n      ) {\n        console.log(\"gotta get a new food...\");\n        return this.newFood();\n      }\n    }\n\n    this.food[0].x = x * this.box;\n    this.food[0].y = y * this.box;\n    this.props.context.fillRect(\n      this.food[0].x,\n      this.food[0].y,\n      this.box,\n      this.box\n    );\n    this.setState({ score: this.state.score + 1 });\n    return;\n  };\n\n  gameOver = () => {\n    let head = this.snake[this.snake.length - 1];\n\n    // Snake-body-gameOver-check\n\n    let over = false;\n    for (let i = 0; i <= this.snake.length - 2; i++) {\n      if (this.snake[i].x === head.x && this.snake[i].y === head.y) {\n        over = true;\n        console.log(\"snake body true\");\n      }\n    }\n\n    // snake head boundry check\n    let noX = head.x / this.box;\n    let noY = head.y / this.box;\n    if (noX > this.max || noY > this.max || noX < 0 || noY < 0) {\n      over = true;\n      console.log(\"snake boundry true\");\n    }\n\n    // actions to perform after the\n    if (over) {\n      clearInterval(this.intervalId);\n      console.log(\"Game Over...\");\n      document.removeEventListener(\"keydown\", this.snakeMovement, true);\n    }\n  };\n\n  render() {\n    console.log(`state = ${this.state.score}`);\n    // console.log(\"set state worked!!!!!\");\n    return <h2 style={{ textAlign: \"center\" }}>Score : {this.state.score}</h2>;\n  }\n}\n\nexport default Snake;\n","import React from \"react\";\n\nimport Game from \"./Game\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { context: null };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    this.setState({ ...this.state, context: context });\n    context.strokeStyle = \"black\";\n    // context.strokeRect(0, 0, 600, 600);\n    // context.strokeRect(0, 0, 600, 600);\n  }\n\n  render() {\n    let snakeComponent = this.state.context ? (\n      <Game context={this.state.context} />\n    ) : null;\n\n    return (\n      <div>\n        <h1 className=\"title\">~!!Snake Game!!~</h1>\n        <div className=\"canvasDiv\">\n          <canvas width=\"600\" height=\"600\" ref={this.canvasRef}></canvas>\n        </div>\n        {snakeComponent}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}